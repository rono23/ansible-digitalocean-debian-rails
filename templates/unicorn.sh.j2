#!/bin/bash

# ### BEGIN INIT INFO
# Provides:          unicorn
# Required-Start:    $network $remote_fs $local_fs postgresql
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop/reload/restart unicorn
### END INIT INFO

start() {
    if [[ -f {{ unicorn.pid }} ]]; then
        logger -sit "{{ unicorn.tag }}" "There is a PID file in {{ unicorn.pid }}. Service should be running"
        exit 1
    else
        logger -sit "{{ unicorn.tag }}" "Trying to start server..."
        su {{ unicorn.user }} -c 'PATH="{{ rbenv.bin_path }}:$PATH" ; eval "$(rbenv init -)"; cd {{ rails.current_path }} ; bin/unicorn_rails -c config/unicorn.rb -E {{ env }} -D'
        if [[ $? == 0 ]]; then
            logger -sit "{{ unicorn.tag }}" "Server started"
        else
            logger -sit "{{ unicorn.tag }}" "FAILED to start server"
            exit 1
        fi
    fi
}

stop() {
    su $USER -c "kill -TERM $(cat {{ unicorn.pid }})"
    sleep 1
    if [[ ! -f {{ unicorn.pid }} ]]; then
        logger -sit "{{ unicorn.tag }}" "Server stoped"
    else
        logger -sit "{{ unicorn.tag }}" "FAILED to stop server"
        exit 1
    fi
}

restart() {
    logger -sit "{{ unicorn.tag }}" "Trying to reload server"
    kill -USR2 $(cat {{ unicorn.pid }})
    sleep 1
    if [[ -f {{ unicorn.old_pid }} ]]; then
        logger -sit "{{ unicorn.tag }}" "Server reloaded"
    else
        logger -sit "{{ unicorn.tag }}" "FAILED to reload server"
        exit 1
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|reload)
        restart
        ;;
    *)
    echo $"Usage: $0 {start|stop|restart|reload}"
    exit 1
esac

exit 0
